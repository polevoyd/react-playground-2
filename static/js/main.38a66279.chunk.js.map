{"version":3,"sources":["SquareButton.js","index.js"],"names":["SquareButton","props","react_default","a","createElement","className","onClick","this","symbol","React","Component","CalcButtons","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tempValue","tempOperation","currentValue","Array","fill","map","element","Math","ceil","random","forEach","index","setTimeout","document","querySelector","style","border","button","changeColors","tempSymbol","target","textContent","includes","setState","length","result","parseInt","toString","substr","_this2","src_SquareButton","e","clickHandler","key","ReactDOM","render","src_CalcButtons","getElementById"],"mappings":"uKAeeA,uLATJC,GACH,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAASC,KAAKN,MAAMK,SACnDJ,EAAAC,EAAAC,cAAA,UAAKG,KAAKN,MAAMO,gBALDC,IAAMC,YCG3BC,cAEF,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMN,KAEDiB,MAAQ,CACTC,UAAW,EACXC,cAAe,GACfC,aAAc,IANHT,8EAYa,IAAIU,MAAM,IAAIC,KAAK,GACTC,IAAI,SAAAC,GACtC,MAAO,QAAUC,KAAKC,KAAqB,IAAhBD,KAAKE,UAAkB,KAAOF,KAAKC,KAAqB,IAAhBD,KAAKE,UAAkB,KAAOF,KAAKC,KAAqB,IAAhBD,KAAKE,UAAkB,SAG5HC,QAAQ,SAACJ,EAASK,GAExBC,WAAW,WACPC,SAASC,cAAc,qBAAqBC,MAAMC,OAAS,cAAmBV,GAC/E,IAAMK,0CAIJM,GAET7B,KAAK8B,eACL,IAEMC,EAAaF,EAAOG,OAAOC,YAEjC,GAJoB,CAAC,IAAK,IAAK,IAAK,KAIpBC,SAASH,GAErB/B,KAAKmC,SAAS,CACVvB,UAAWZ,KAAKW,MAAMG,aACtBD,cAAekB,EACfjB,aAAc,UAGf,GAXU,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAWlCoB,SAASH,GAEL,MAAfA,GAAoD,MAA5B/B,KAAKW,MAAMG,aAEpCd,KAAKmC,SAAS,CACVrB,aAAciB,IAEK,MAAfA,GAAoD,MAA5B/B,KAAKW,MAAMG,aAE3Cd,KAAKmC,SAAS,CACVrB,aAAciB,IAGb/B,KAAKW,MAAMG,aAAasB,OAAS,GAElCpC,KAAKmC,SAAS,CACVrB,aAAcd,KAAKW,MAAMG,aAAeiB,SAKjD,GAAmB,MAAfA,GAEP,GAAK/B,KAAKW,MAAMG,cAAkBd,KAAKW,MAAMC,WAAeZ,KAAKW,MAAME,cAAgB,CAEnF,IAAIwB,EACJ,OAAQrC,KAAKW,MAAME,eAEf,IAAK,IACLwB,EAASC,SAAStC,KAAKW,MAAMC,WAAa0B,SAAStC,KAAKW,MAAMG,cAC9D,MAEA,IAAK,IACLuB,EAASC,SAAStC,KAAKW,MAAMC,WAAa0B,SAAStC,KAAKW,MAAMG,cAC9D,MAEA,IAAK,IACLuB,EAASC,SAAStC,KAAKW,MAAMC,WAAa0B,SAAStC,KAAKW,MAAMG,cAC9D,MAEA,IAAK,IACLuB,EAASC,SAAStC,KAAKW,MAAMC,WAAa0B,SAAStC,KAAKW,MAAMG,cAOlEuB,EAAUA,EAAOE,WAAWH,OAAS,EAAKC,EAAOE,WAAWC,OAAO,EAAG,GAAKH,EAAOE,WAClFvC,KAAKmC,SAAS,CACVrB,aAAcuB,EACdxB,cAAe,GACfD,UAAWyB,UAKnBrC,KAAKmC,SAAS,CACVrB,aAAc,sCAKjB,IAAA2B,EAAAzC,KAEL,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeE,KAAKW,MAAMG,cACzCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAJF,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KAK1EmB,IAAK,SAACC,EAASK,GAAV,OAAqB5B,EAAAC,EAAAC,cAAC6C,EAAD,CAAc3C,QAAS,SAAA4C,GAAC,OAAIF,EAAKG,aAAaD,IAAI1C,OAAQiB,EAAS2B,IAAK,UAAYtB,eA/GlHrB,IAAMC,WAuHhC2C,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAAiBvB,SAASwB,eAAe","file":"static/js/main.38a66279.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\nclass SquareButton extends React.Component {\n\n    render(props) {\n        return (\n            <div className=\"square-button\" onClick={this.props.onClick}>\n            <h3>{this.props.symbol}</h3>\n            </div>\n        );\n    }\n}\n\nexport default SquareButton;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport SquareButton from './SquareButton';\n\n\nclass CalcButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tempValue: 0,\n            tempOperation: '',\n            currentValue: ''\n        };\n    }\n\n    changeColors() {\n        \n        const arrayOfRandomColors = new Array(30).fill(0);\n        const tempArray = arrayOfRandomColors.map(element => {\n            return 'rgba(' + Math.ceil(Math.random() * 255) + ', ' + Math.ceil(Math.random() * 255) + ', ' + Math.ceil(Math.random() * 255) + ', 1)';\n        })\n        \n        tempArray.forEach((element, index) => \n        {\n            setTimeout(() => {\n                document.querySelector('.calculator-board').style.border = 10 + 'px solid ' + element;\n            }, 100 * index)\n        });\n    }\n\n    clickHandler(button) {\n\n        this.changeColors()\n        const operations_ = ['*', '%', '-', '+'];\n        const numbers_ = ['1','2','3','4','5','6','7','8','9','0'];\n        const tempSymbol = button.target.textContent;\n\n        if (operations_.includes(tempSymbol)) {\n            \n            this.setState({\n                tempValue: this.state.currentValue,\n                tempOperation: tempSymbol,\n                currentValue: ''\n            });\n\n        } else if (numbers_.includes(tempSymbol)) {\n\n            if ((tempSymbol === '0') && (this.state.currentValue === '0')) {\n\n                this.setState({\n                    currentValue: tempSymbol\n                })\n            } else if ((tempSymbol !== '0') && (this.state.currentValue === '0')){\n\n                this.setState({\n                    currentValue: tempSymbol\n                })\n            } else {\n                if ((this.state.currentValue.length < 7)) {\n\n                    this.setState({\n                        currentValue: this.state.currentValue + tempSymbol\n                    });\n                }\n            }\n            \n        } else if (tempSymbol === '='){\n\n            if ((this.state.currentValue) && (this.state.tempValue) && (this.state.tempOperation)) {\n\n                let result;\n                switch (this.state.tempOperation) {\n\n                    case '+':\n                    result = parseInt(this.state.tempValue) + parseInt(this.state.currentValue);\n                    break;\n\n                    case '-':\n                    result = parseInt(this.state.tempValue) - parseInt(this.state.currentValue);\n                    break;\n\n                    case '*':\n                    result = parseInt(this.state.tempValue) * parseInt(this.state.currentValue);\n                    break;\n\n                    case '%':\n                    result = parseInt(this.state.tempValue) / parseInt(this.state.currentValue);\n                    break;\n                    \n                    default:\n                    break;\n                }\n\n                result = (result.toString().length > 7) ? result.toString().substr(0, 7) : result.toString();\n                this.setState({\n                    currentValue: result,\n                    tempOperation: '',\n                    tempValue: result\n                });\n            }\n        } else {\n\n            this.setState({\n                currentValue: ''      \n            });\n        }\n    }\n\n    render() {\n        const buttonsArray = ['*', '%', '+', '-', '1', '2', '3', 'C', '4', '5', '6', '=', '7', '8', '9','0'];\n        return (\n            <div className=\"calculator-board\">\n                <div className=\"input-field\">{this.state.currentValue}</div>\n                <div className=\"square-buttons\"> \n                {buttonsArray.map( (element, index) => (<SquareButton onClick={e => this.clickHandler(e)} symbol={element} key={'button_' + index} />))}\n                </div>\n            </div>\n        );\n    }\n}\n\n// rendering whole thing to a page\nReactDOM.render(<CalcButtons />, document.getElementById('root'));"],"sourceRoot":""}